(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _helpers = require('./helpers');

require('./examples');

document.addEventListener('DOMContentLoaded', function () {
	Array.prototype.forEach.call(document.querySelectorAll('pre code[class^="lang"]'), function (code) {
		// set pre, wrap, opts, and get meta data from code
		var pre = code.parentNode;
		var conf = {};
		var text = String(code.textContent || code.innerText || '');

		// get meta data from code class
		code.className.replace(/^lang-(\w+)(?::(\w+))?/, function ($0, $1, $2) {
			if ($2) return 'example:' + $2 + ',lang:' + $2;

			if ($1 === 'example') return 'example:html';

			return 'lang:' + $1;
		}).split(/\s*,\s*/).forEach(function (opt) {
			opt = opt.split(':');

			conf[opt.shift().trim()] = opt.join(':').trim();
		});

		code.removeAttribute('class');

		// conditionally create code examples
		if (conf.example in examples.lang) {
			examples.lang[conf.example](pre, text, conf);
		} else {
			var exampleCode = document.createElement('div');
			exampleCode.classList.add('example-code', 'clearfix');
			if (conf.lang === 'open') exampleCode.classList.add('example-code--is-visible');
			var codeExampleToggle = exampleCode.appendChild(document.createElement('div'));
			codeExampleToggle.classList.add('example-code__toggle');
			pre.className = 'example-code__pre';
			var exampleWrapper = (0, _helpers.wrapEl)(pre, exampleCode);
		}
	});

	var exampleCode = document.querySelectorAll('.example-code');

	Array.prototype.map.call(exampleCode, function (el) {
		var toggler = el.querySelector('.example-code__toggle');
		toggler.addEventListener('click', function () {
			el.classList.toggle('example-code--is-visible');
		});
	});
});

},{"./examples":2,"./helpers":3}],2:[function(require,module,exports){
'use strict';

examples.lang = {
	color: function color(pre, value) {
		var colors = pre.parentNode.insertBefore(document.createElement('div'), pre);
		var lines = value.trim().split(/\n+/);

		colors.className = 'colors';

		lines.map(parseLine).map(parseColor).forEach(colors.appendChild, colors);

		function parseLine(line) {
			line = line.trim();

			var color = {};
			var match = /@([^:]+):\s*(.+?)(?=\s+@|$)/g;
			var prop;

			while (prop = match.exec(line)) {
				color[prop[1]] = prop[2];
			}return color;
		}

		function parseColor(color) {
			var colorNode = document.createElement('div');
			var colorSwatch = document.createElement('div');
			var colorGrid = document.createElement('div');
			var colorHex = document.createElement('div');
			var colorVar = document.createElement('div');

			colorNode.classList.add('color');
			colorSwatch.classList.add('color-swatch');
			colorGrid.classList.add('grid');
			colorHex.classList.add('color-swatch__hex', 'grid__col');
			colorVar.classList.add('color-swatch__var', 'grid__col');

			colorSwatch.style.backgroundColor = color.color;

			colorNode.appendChild(colorSwatch);
			colorSwatch.appendChild(colorGrid);
			colorGrid.appendChild(colorHex);
			// colorGrid.appendChild(colorVar);
			colorHex.appendChild(document.createTextNode(color.color));

			Object.keys(color).filter(function (key) {
				return key !== 'color';
			}).forEach(function (key) {
				var varNode = colorGrid.appendChild(colorVar);

				// varNode.className = 'color__variable';

				varNode.setAttribute('data-name', key);

				varNode.appendChild(document.createTextNode(color[key]));
			});

			return colorNode;
		}

		function hex2rgb(hex) {
			var bigint = parseInt(hex.slice(1).replace(/^([0-9a-f])([0-9a-f])([0-9a-f])$/i, '$1$1$2$2$3$3'), 16);
			var r = bigint >> 16 & 255;
			var g = bigint >> 8 & 255;
			var b = bigint & 255;

			return [r, g, b];
		}

		function getRGB(color) {
			return (/^#/.test(color) ? hex2rgb(color) : color.replace(/[^\d,]+/g, '').split(/,/).map(function (part) {
					return part * 1;
				})
			);
		}

		function contrast(color) {
			var rgb = getRGB(color);
			var o = Math.round((parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000);

			return o <= 180 ? '#ffffff' : '#000000';
		}
	},
	html: function html(pre, value, conf) {
		var codeExample = document.createElement('div');
		codeExample.classList.add('example-code', 'clearfix');

		var wrap = pre.parentNode;
		pre.classList.add('example-code__pre');

		var preview = wrap.insertBefore(document.createElement('div'), pre);
		preview.className = 'docs-example clearfix';

		var resize = preview.appendChild(document.createElement('div'));
		resize.className = 'docs-resize';

		var resizeLeft = resize.appendChild(document.createElement('span'));
		resizeLeft.className = 'c-resize--left';

		var iframe = resize.appendChild(document.createElement('iframe'));
		iframe.className = 'docs-iframe';
		var style = iframe.style;

		var closestSection = iframe.closest('.sg-section');
		var sectionId = closestSection.id;

		var resizeRight = resize.appendChild(document.createElement('span'));
		resizeRight.className = 'c-resize--right';

		wrap.insertBefore(codeExample, pre);
		var codeExampleToggle = codeExample.appendChild(document.createElement('div'));
		codeExampleToggle.classList.add('example-code__toggle');
		codeExample.appendChild(pre);

		// get iframe dom
		var iwin = iframe.contentWindow;
		var idoc = iwin.document;

		// write example content to iframe
		idoc.open();

		var html = '<base' + (examples.base && ' href="' + examples.base + '"') + (examples.target && ' target="' + examples.target + '"') + '>';

		html += examples.css.map(function (css) {
			return '<link href="' + css + '" rel="stylesheet">';
		}).join('');

		html += examples.js.map(function (js) {
			return '<script src="' + js + '"></script>';
		}).join('');

		html += value;

		html += examples.bodyjs.map(function (js) {
			return '<script src="' + js + '"></script>';
		}).join('');

		idoc.write(html);

		idoc.documentElement.setAttribute('style', examples.htmlcss);
		idoc.documentElement.classList.add('sg-example', 'sg-example--' + sectionId);
		idoc.body.setAttribute('style', examples.bodycss);
		iframe.setAttribute('class', 'docs-iframe clearfix');

		idoc.close();

		if (conf.width) style.width = String(conf.width);

		// set iframe height based on content
		var documentElement = idoc.documentElement;
		var scrollHeight;

		function resizeFunc() {
			var currentScrollHeight = documentElement.scrollHeight;

			if (scrollHeight !== currentScrollHeight) {
				scrollHeight = currentScrollHeight;

				style.height = 0;

				style.height = documentElement.scrollHeight + (iframe.offsetHeight - iwin.innerHeight) + 'px';
			}
		}

		iwin.addEventListener('load', resizeFunc);

		resizeFunc();

		setInterval(resizeFunc, 334);
	}
};

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var wrapEl = function wrapEl(target, wrapper) {
  var targetParent = target.parentNode;
  targetParent.insertBefore(wrapper, target);
  wrapper.appendChild(target);
  return wrapper;
};

exports.wrapEl = wrapEl;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
